# for running in docker compose with prebuilt images

# version is now using "compose spec"
# v2 and v3 are now combined!
# docker-compose v1.27+ required

services:
  vote:
    image: ghcr.io/seanherbert105/devsecops-course/voting-app/vote:main
    depends_on:
      redis:
        condition: service_healthy 
    ports:
      - "8080:80"
    networks:
      - front-tier
      - back-tier

  result:
    image: ghcr.io/seanherbert105/devsecops-course/voting-app/result:main
    depends_on:
      db:
        condition: service_healthy 
    ports:
      - "8081:80"
    networks:
      - front-tier
      - back-tier

  worker:
    image: ghcr.io/seanherbert105/devsecops-course/voting-app/worker:main
    depends_on:
      redis:
        condition: service_healthy 
      db:
        condition: service_healthy 
    networks:
      - back-tier

  redis:
    image: docker.io/redis:alpine
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    volumes:
      - "redis-data:/var/lib/postgresql/data"
    networks:
      - back-tier

  db:
    image: docker.io/postgres:15-alpine
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d mydb"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
    volumes:
      - "db-data:/var/lib/postgresql/data"
    networks:
      - back-tier

  seed:
    image: ghcr.io/seanherbert105/devsecops-course/voting-app/seed-data:main
    profiles: ["seed"]
    depends_on:
      vote:
        condition: service_healthy 
    networks:
      - front-tier
    restart: "no"

volumes:
  db-data:
  redis-data:

networks:
  front-tier:
  back-tier:
